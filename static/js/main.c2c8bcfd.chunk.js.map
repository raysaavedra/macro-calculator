{"version":3,"sources":["pages/Home/constants.js","config/app.js","pages/Home/utils.js","pages/Home/components/Results/index.js","pages/Home/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["CONSTANTS","MALE","FEMALE","LOOSE","GAIN","ACTIVITY_LIST","value","label","description","ACITIVTY_LEVEL_VALUES","0","1","2","3","4","5","configs","PoundToKg","FeetToCm","InchesToCm","ProteinDefaultConversion","CarbsDefaultConversion","FatDefaultConversion","ProteinDefaultGramConversion","CarbsDefaultGramConversion","FatDefaultGramConversion","FiberDefaultGramConversion","getPercentOf","val","percent","calculateNewValueFromPercent","weight","weightGoalPercent","weightGoalType","Math","round","constants","calculateResult","ft","inches","lbs","gender","age","height","useMetricInHeight","useMetricInWeight","activityLevel","goal","goalValue","s","config","caloriesPerDay","floor","activityLevelMultiplier","proteinConversion","carbsConversion","fatConversion","fiberConversion","calories","protein","fat","carbs","fiber","useStyles","makeStyles","theme","blackBoldText","color","fontWeight","greenBoldText","blueBoldText","orangeBoldText","redBoldText","violetBoldText","Results","proteinInGrams","fatInGrams","carbsInGrams","fiberInGrams","proteinSplit","fatSplit","carbsSplit","classes","Grid","container","spacing","direction","item","Divider","style","width","Typography","variant","className","Box","display","alignItems","justifyContent","ml","root","marginTop","backgroundColor","borderRadius","padding","Home","useState","setGender","setAge","heightFt","setHeightFt","heightIn","setHeightIn","heightCm","setHeightCm","setUseMetricInHeight","setUseMetricInWeight","weightGoal","setWeightGoal","setWeightGoalPercent","setWeight","setActivityLevel","setCaloriesPerDay","useEffect","calculate","result","heightType","weightType","Container","justify","xs","sm","md","lg","TextField","onChange","e","target","FormControl","mb","FormLabel","component","RadioGroup","aria-label","flexDirection","FormControlLabel","control","Radio","Tooltip","title","IconButton","onClick","Select","native","defaultValue","map","index","ButtonGroup","Button","p","FormHelperText","footer","position","bottom","Footer","Link","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2c8bcfd.chunk.js","sourcesContent":["const GENDER = {\n  MALE: \"male\",\n  FEMALE: \"female\",\n};\n\nconst GOAL = {\n  LOOSE: 0,\n  GAIN: 1,\n};\n\nconst ACITIVTY_LEVEL_VALUES = {\n  0: 1,\n  1: 1.2,\n  2: 1.375,\n  3: 1.55,\n  4: 1.725,\n  5: 1.9,\n};\n\nconst ACTIVITY_LIST = [\n  {\n    value: 0,\n    label: \"Basal Metabolic Rate\",\n    description:\n      \"BMR is the number of calories required to keep your body functioning at rest. Also known as your body's metabolism\",\n  },\n  {\n    value: 1,\n    label: \"Sedentary\",\n    description: \"Little to no exercise\",\n  },\n  {\n    value: 2,\n    label: \"Lightly Active\",\n    description: \"Light exercise (1-3 days per week)\",\n  },\n  {\n    value: 3,\n    label: \"Moderately Active\",\n    description: \"Moderate exercise (3-5 days per week)\",\n  },\n  {\n    value: 4,\n    label: \"Very Active\",\n    description: \"Hard exercise (5-7 days per week)\",\n  },\n  {\n    value: 5,\n    label: \"Extremely Active\",\n    description: \"Very intense exercise daily or physical job\",\n  },\n];\n\nconst CONSTANTS = {\n  ...GENDER,\n  ...GOAL,\n  ACTIVITY_LIST,\n  ACITIVTY_LEVEL_VALUES,\n};\n\nexport default CONSTANTS;\n","const configs = {\n  PoundToKg: 0.453592,\n  FeetToCm: 30.48,\n  InchesToCm: 2.54,\n  ProteinDefaultConversion: 0.25,\n  CarbsDefaultConversion: 0.5,\n  FatDefaultConversion: 0.25,\n  ProteinDefaultGramConversion: 4,\n  CarbsDefaultGramConversion: 4,\n  FatDefaultGramConversion: 9,\n  FiberDefaultGramConversion: 14,\n};\n\nexport default configs;\n","import config from \"../../config/app\";\nimport constants from \"./constants\";\n\nconst getPercentOf = (val, percent) => {\n  return (percent / 100) * val;\n};\nconst convertPoundsToKg = (lbs) => Math.round(lbs * config.PoundToKg);\nconst convertFtInToCm = (ft, inches) =>\n  Math.round(ft * config.FeetToCm + inches * config.InchesToCm);\n\nexport const calculateNewValueFromPercent = (\n  weight,\n  weightGoalPercent,\n  weightGoalType\n) => {\n  return Math.round(\n    weightGoalType === constants.LOOSE\n      ? weight - getPercentOf(weight, weightGoalPercent)\n      : weight + getPercentOf(weight, weightGoalPercent)\n  );\n};\n\nexport const calculateResult = ({\n  gender,\n  age,\n  height,\n  useMetricInHeight,\n  weight,\n  useMetricInWeight,\n  activityLevel,\n  goal,\n  goalValue,\n}) => {\n  let s = +5;\n\n  if (gender === constants.FEMALE) s = -161;\n\n  if (!useMetricInHeight) {\n    height = convertFtInToCm(height[0], height[1]);\n  }\n\n  if (!useMetricInWeight) {\n    weight = convertPoundsToKg(weight);\n  }\n\n  let caloriesPerDay = Math.floor(10 * weight + 6.25 * height - 5 * age + s);\n  caloriesPerDay = calculateNewValueFromPercent(\n    caloriesPerDay,\n    goalValue,\n    goal\n  );\n  const activityLevelMultiplier =\n    constants.ACITIVTY_LEVEL_VALUES[activityLevel];\n  caloriesPerDay = Math.floor(caloriesPerDay * activityLevelMultiplier);\n\n  const proteinConversion = caloriesPerDay * config.ProteinDefaultConversion;\n  const carbsConversion = caloriesPerDay * config.CarbsDefaultConversion;\n  const fatConversion = caloriesPerDay * config.FatDefaultConversion;\n  const fiberConversion = caloriesPerDay / 1000;\n\n  return {\n    calories: caloriesPerDay,\n    protein: Math.floor(\n      proteinConversion / config.ProteinDefaultGramConversion\n    ),\n    fat: Math.floor(fatConversion / config.FatDefaultGramConversion),\n    carbs: Math.floor(carbsConversion / config.CarbsDefaultGramConversion),\n    fiber: Math.floor(fiberConversion * config.FiberDefaultGramConversion),\n  };\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  blackBoldText: {\n    color: \"black\",\n    fontWeight: \"bold\",\n  },\n  greenBoldText: {\n    color: \"green\",\n    fontWeight: \"bold\",\n  },\n  blueBoldText: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n  orangeBoldText: {\n    color: \"orange\",\n    fontWeight: \"bold\",\n  },\n  redBoldText: {\n    color: \"red\",\n    fontWeight: \"bold\",\n  },\n  violetBoldText: {\n    color: \"violet\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst Results = ({\n  caloriesPerDay,\n  proteinInGrams,\n  fatInGrams,\n  carbsInGrams,\n  fiberInGrams,\n  proteinSplit,\n  fatSplit,\n  carbsSplit,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={3} direction=\"column\">\n      <Grid item>\n        <Divider style={{ width: \"90%\" }} />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h4\" className={classes.blackBoldText}>\n          Results\n        </Typography>\n      </Grid>\n\n      <Grid item>\n        <Grid container spacing={4}>\n          <Grid item>\n            <Typography variant=\"h6\" className={classes.blackBoldText}>\n              Calories per Day\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h6\" className={classes.greenBoldText}>\n              {caloriesPerDay}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item>\n        <Grid container direction=\"column\" spacing={1}>\n          <Grid item>\n            <Typography variant=\"h6\" className={classes.blackBoldText}>\n              Daily Macros\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"caption\">\n              {`(${carbsSplit} Carbs, ${proteinSplit} Protein, ${fatSplit} fat)`}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Grid container spacing={5}>\n              <Grid item>\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"flex-start\"\n                >\n                  <Typography variant=\"body1\" className={classes.blackBoldText}>\n                    Protein\n                  </Typography>\n                  <Box ml={2}>\n                    <Typography\n                      variant=\"body1\"\n                      className={classes.blueBoldText}\n                    >\n                      {`${proteinInGrams}g`}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Grid>\n\n              <Grid item>\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"flex-start\"\n                >\n                  <Typography variant=\"body1\" className={classes.blackBoldText}>\n                    Fat\n                  </Typography>\n                  <Box ml={2}>\n                    <Typography\n                      variant=\"body1\"\n                      className={classes.orangeBoldText}\n                    >\n                      {`${fatInGrams}g`}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Grid container spacing={5}>\n              <Grid item>\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"flex-start\"\n                >\n                  <Typography variant=\"body1\" className={classes.blackBoldText}>\n                    Carbs\n                  </Typography>\n                  <Box ml={2}>\n                    <Typography variant=\"body1\" className={classes.redBoldText}>\n                      {`${carbsInGrams}g`}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Grid>\n\n              <Grid item>\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"flex-start\"\n                >\n                  <Typography variant=\"body1\" className={classes.blackBoldText}>\n                    Fiber\n                  </Typography>\n                  <Box ml={2}>\n                    <Typography\n                      variant=\"body1\"\n                      className={classes.violetBoldText}\n                    >\n                      {`${fiberInGrams}g`}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Divider style={{ width: \"90%\" }} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Results;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport constants from \"./constants\";\nimport config from \"../../config/app\";\nimport { calculateResult, calculateNewValueFromPercent } from \"./utils\";\nimport Results from \"./components/Results\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(1),\n    backgroundColor: \"#eeeeee\",\n    borderRadius: theme.spacing(2),\n  },\n  container: {\n    padding: theme.spacing(5, 0, 5, 0),\n  },\n  blackBoldText: {\n    color: \"black\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n\n  const [gender, setGender] = useState(constants.MALE);\n  const [age, setAge] = useState(25);\n  const [heightFt, setHeightFt] = useState(4);\n  const [heightIn, setHeightIn] = useState(5);\n  const [heightCm, setHeightCm] = useState(180);\n  const [useMetricInHeight, setUseMetricInHeight] = useState(false);\n  const [useMetricInWeight, setUseMetricInWeight] = useState(false);\n  const [weightGoal, setWeightGoal] = useState(constants.LOOSE);\n  const [weightGoalPercent, setWeightGoalPercent] = useState(0);\n  const [weight, setWeight] = useState(150);\n  const [activityLevel, setActivityLevel] = useState(0);\n  const [caloriesPerDay, setCaloriesPerDay] = useState({\n    calories: 0,\n    protein: 0,\n    fat: 0,\n    carbs: 0,\n    fiber: 0,\n  });\n\n  useEffect(() => {\n    calculate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    gender,\n    age,\n    heightFt,\n    heightIn,\n    heightCm,\n    useMetricInHeight,\n    weight,\n    useMetricInWeight,\n    weightGoal,\n    weightGoalPercent,\n    activityLevel,\n  ]);\n\n  const handleGenderChange = (e) => {\n    setGender(e.target.value);\n  };\n\n  const handleHeightFtChange = (e) => {\n    setHeightFt(e.target.value);\n  };\n\n  const handleHeightInChange = (e) => {\n    setHeightIn(e.target.value);\n  };\n\n  const handleHeightCmChange = (e) => {\n    setHeightCm(e.target.value);\n  };\n\n  const handleWeighChange = (e) => {\n    setWeight(e.target.value);\n  };\n\n  const handleActivityLevelChange = (e) => {\n    setActivityLevel(e.target.value);\n  };\n\n  const handleHeightSwitch = () => {\n    setUseMetricInHeight(!useMetricInHeight);\n  };\n\n  const handleWeightSwitch = () => {\n    setUseMetricInWeight(!useMetricInWeight);\n  };\n\n  const handleWeightGoalChange = (e) => {\n    setWeightGoal(e.target.value);\n  };\n\n  const handleMinusWeightGoal = () => {\n    let p = weightGoalPercent;\n    if (p <= 0) return;\n    p -= 1;\n\n    setWeightGoalPercent(p);\n  };\n\n  const handleAddWeightGoal = () => {\n    let p = weightGoalPercent;\n    p += 1;\n\n    setWeightGoalPercent(p);\n  };\n\n  const handleAgeChange = (e) => {\n    setAge(e.target.value);\n  };\n\n  const calculate = () => {\n    const result = calculateResult({\n      gender,\n      age,\n      height: useMetricInHeight ? heightCm : [heightFt, heightIn],\n      heightType: useMetricInHeight,\n      weight: weight,\n      weightType: useMetricInWeight,\n      activityLevel,\n      goal: weightGoal,\n      goalValue: weightGoalPercent,\n    });\n\n    setCaloriesPerDay(result);\n  };\n\n  return (\n    <Container className={classes.root}>\n      <Grid\n        container\n        direction=\"column\"\n        className={classes.container}\n        spacing={4}\n      >\n        <Grid item>\n          <Typography variant=\"h4\" className={classes.blackBoldText}>\n            Macro Calculator\n          </Typography>\n          <Typography variant=\"body2\">\n            This calculator will determine your daily caloric need based from\n            the values you entered.\n          </Typography>\n          <Typography variant=\"body2\">\n            This will also calculate your macros.\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Grid container alignItems=\"flex-start\" justify=\"center\" spacing={2}>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <Grid container direction=\"column\" spacing={3}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.blackBoldText}>\n                    Input values to calculate your macros\n                  </Typography>\n                </Grid>\n\n                <Grid item>\n                  <TextField\n                    label=\"Age\"\n                    value={age}\n                    onChange={handleAgeChange}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <FormControl>\n                    <Box mb={1}>\n                      <FormLabel component=\"legend\">Gender</FormLabel>\n                    </Box>\n                    <RadioGroup\n                      aria-label=\"gender\"\n                      value={gender}\n                      onChange={handleGenderChange}\n                      style={{\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      <FormControlLabel\n                        value={constants.MALE}\n                        control={<Radio />}\n                        label=\"Male\"\n                      />\n                      <FormControlLabel\n                        value={constants.FEMALE}\n                        control={<Radio />}\n                        label=\"Female\"\n                      />\n                    </RadioGroup>\n                  </FormControl>\n                </Grid>\n\n                <Grid item>\n                  <FormControl>\n                    <Box mb={1}>\n                      <FormLabel component=\"legend\">Height</FormLabel>\n                    </Box>\n                    <Grid container spacing={1}>\n                      {useMetricInHeight ? (\n                        <Grid item>\n                          <TextField\n                            label=\"Centimeters\"\n                            value={heightCm}\n                            onChange={handleHeightCmChange}\n                          />\n                        </Grid>\n                      ) : (\n                        <>\n                          <Grid item>\n                            <TextField\n                              label=\"Feet\"\n                              value={heightFt}\n                              onChange={handleHeightFtChange}\n                            />\n                          </Grid>\n                          <Grid item>\n                            <TextField\n                              label=\"Inches\"\n                              value={heightIn}\n                              onChange={handleHeightInChange}\n                            />\n                          </Grid>\n                        </>\n                      )}\n\n                      <Grid item>\n                        <Tooltip\n                          title={\n                            useMetricInHeight\n                              ? \"Switch to feet and inches\"\n                              : \"Switch to cm\"\n                          }\n                        >\n                          <IconButton onClick={handleHeightSwitch}>\n                            <CachedIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Grid>\n                    </Grid>\n                  </FormControl>\n                </Grid>\n\n                <Grid item>\n                  <FormControl>\n                    <Box mb={1}>\n                      <FormLabel component=\"legend\">Weight</FormLabel>\n                    </Box>\n                    <Grid container spacing={1}>\n                      <Grid item>\n                        <TextField\n                          label={\n                            useMetricInWeight\n                              ? \"Kilograms (kg)\"\n                              : \"Pounds (lbs)\"\n                          }\n                          value={weight}\n                          onChange={handleWeighChange}\n                        />\n                      </Grid>\n                      <Grid item>\n                        <Tooltip\n                          title={\n                            useMetricInWeight\n                              ? \"Switch to pounds (lbs)\"\n                              : \"Switch to kilogram (kg)\"\n                          }\n                        >\n                          <IconButton onClick={handleWeightSwitch}>\n                            <CachedIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Grid>\n                    </Grid>\n                  </FormControl>\n                </Grid>\n\n                <Grid item>\n                  <FormControl>\n                    <Box mb={1}>\n                      <FormLabel component=\"legend\">\n                        Select Activity Level\n                      </FormLabel>\n                    </Box>\n\n                    <Select\n                      native\n                      defaultValue={activityLevel}\n                      onChange={handleActivityLevelChange}\n                    >\n                      {constants.ACTIVITY_LIST.map((val, index) => {\n                        return (\n                          <option key={index} value={val.value}>\n                            {`${val.label} - ${val.description}`}\n                          </option>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                <Grid item>\n                  <FormControl>\n                    <Box mb={1}>\n                      <FormLabel component=\"legend\">Weight Goal</FormLabel>\n                    </Box>\n\n                    <Grid container spacing={2}>\n                      <Grid item>\n                        <Select\n                          native\n                          defaultValue={weightGoal}\n                          onChange={handleWeightGoalChange}\n                        >\n                          <option value={constants.LOOSE}>Loose</option>\n                          <option value={constants.GAIN}>Gain</option>\n                        </Select>\n                      </Grid>\n\n                      <Grid item>\n                        <Box\n                          ml={3}\n                          height=\"100%\"\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          justifyContent=\"center\"\n                        >\n                          <Typography variant=\"body1\">{`${weightGoalPercent}%`}</Typography>\n                        </Box>\n                      </Grid>\n\n                      <Grid item>\n                        <ButtonGroup\n                          color=\"primary\"\n                          aria-label=\"outlined primary button group\"\n                        >\n                          <Button onClick={handleMinusWeightGoal}>-</Button>\n                          <Button onClick={handleAddWeightGoal}>+</Button>\n                        </ButtonGroup>\n                      </Grid>\n                    </Grid>\n\n                    <Box>\n                      <FormHelperText>\n                        {weightGoalPercent === 0\n                          ? `Maintain Weight: ${weight}${\n                              useMetricInWeight ? \"kg\" : \"lbs\"\n                            }`\n                          : `Target Weight: ${calculateNewValueFromPercent(\n                              weight,\n                              weightGoalPercent,\n                              weightGoal\n                            )}${useMetricInWeight ? \"kg\" : \"lbs\"}`}\n                      </FormHelperText>\n                    </Box>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <Results\n                caloriesPerDay={caloriesPerDay.calories}\n                fatInGrams={caloriesPerDay.fat}\n                carbsInGrams={caloriesPerDay.carbs}\n                proteinInGrams={caloriesPerDay.protein}\n                fiberInGrams={caloriesPerDay.fiber}\n                proteinSplit={`${config.ProteinDefaultConversion * 100}%`}\n                fatSplit={`${config.FatDefaultConversion * 100}%`}\n                carbsSplit={`${config.CarbsDefaultConversion * 100}%`}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: \"fixed\",\n    bottom: 0,\n    width: \"100%\",\n  },\n}));\n\nconst Footer = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.footer}>\n      <Box\n        display=\"flex\"\n        width=\"100%\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography>\n          <Link href=\"http://raysaavedra.github.io/\">\n            &copy; Copyright 2020, Ray Saavedra\n          </Link>\n        </Typography>\n      </Box>\n    </div>\n  );\n};\n\nexport default Footer;\n","import \"./App.css\";\n\nimport Home from \"./pages/Home\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <>\n      <Home />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}